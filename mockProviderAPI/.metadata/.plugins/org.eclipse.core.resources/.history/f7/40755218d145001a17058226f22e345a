cmdhistory=["\\n\\n(defroutes app-routes\\n  (GET \\"/\\" [] simple-body-page)\\n  (GET \\"/request\\" [] request-example)\\n  (route/not-found \\"Error, page not found\!\\"))" "\\n\\n(defroutes app-routes\\n  (GET \\"/\\" [] \\"test\\")\\n  (route/not-found \\"Error, page not found\!\\"))" "\\n\\n(defn -main\\n  \\"This is our main entry point\\"\\n  [& args]\\n  (let [port (Integer/parseInt (or (System/getenv \\"PORT\\") \\"3000\\"))]\\n    ; Run the server with Ring.defaults middleware\\n    (server/run-server (wrap-defaults \#'app-routes site-defaults) {\:port port})\\n    ; Run the server without ring defaults\\n    ;(server/run-server \#'app-routes {\:port port})\\n    (println (str \\"Running webserver at http\:/127.0.0.1\:\\" port \\"/\\"))))" " (server/run-server (wrap-defaults \#'app-routes site-defaults) {\:port 3000})" "\\n\\n(defroutes app-routes\\n  (GET \\"/\\" [] \\"test\\")\\n  (GET \\"/ping\\" \\"here\\")\\n  (route/not-found \\"Error, page not found\!\\"))" "\\n\\n(defroutes app-routes\\n  (GET \\"/\\" [] \\"test\\")\\n  (GET \\"/ping\\" [] \\"here\\")\\n  (route/not-found \\"Error, page not found\!\\"))" "(server/close)" "(server/run-server (wrap-defaults \#'app-routes site-defaults) {\:port 4444})" "handler" "(server/run-server (wrap-defaults \#'app-routes site-defaults) {\:port 4444})" "(defroutes app\\n  (ANY \\"/mockEndpoint/\\" [text] (str \\"test\: \\" text)))" "\\n(defroutes app\\n  (ANY \\"/mockEndpoint/\\" [\\n                         ] \\"test\: \\"))" "(defroutes app\\n  (ANY \\"/mockEndpoint/\\" [text] (str \\"test\: \\" text)))" "(defroutes app\\n  (ANY \\"/mockEndpoint\\" [text] (str \\"test\: \\" text)))" "\\n(defroutes app\\n  (ANY \\"/mockEndpoint/\\" [\\n                         ] \\"test\: \\"))" "\\n(defroutes app\\n  (ANY \\"/mockEndpoint/\\" [] \\"test\\"))" "(def handler \\n  (-> app \\n      wrap-params))" "(defroutes app\\n  (ANY \\"/mockEndpoint\\" [text] (str \\"test\: \\" text))\\n    (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                           \:handle-ok \\"<html>Hello, Internet.</html>\\")))" "(defroutes app\\n  (ANY \\"/mockEndpoint/\:text\\" [text] (mockEndpoint text))\\n  (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                         \:handle-ok \\"<html>Hello, Internet.</html>\\")))\\n\\n(defresource mockEndpoint [text]\\n  \:available-media-types [\\"text/plain\\"]\\n  \:handle-ok (fn [_] (format \\"The text is %s\\" text)))" "(defresource mockEndpoint [text]\\n  \:available-media-types [\\"text/plain\\"]\\n  \:handle-ok (fn [_] (format \\"The text is %s\\" text)))\\n\\n\\n\\n(defroutes app\\n  (ANY \\"/mockEndpoint/\:text\\" [text] (mockEndpoint text))\\n  (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                         \:handle-ok \\"<html>Hello, Internet.</html>\\")))" "(defroutes app\\n  (ANY \\"/mockEndpoint\:text\\" [text] (mockEndpoint text))\\n  (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                         \:handle-ok \\"<html>Hello, Internet.</html>\\")))" "(defresource mockEndpoint [text]\\n  \:available-media-types [\\"text/plain\\"]\\n  \:handle-ok (fn [_] (format \\"The text from agent is %s\\" text)))" "\\n\\n(defresource mockEndpoint [text]\\n  \:available-media-types [\\"text/plain\\"]\\n  \:handle-ok (fn [_] (format \\"The text from agent is %s\\" text)))\\n\\n\\n\\n(defroutes app\\n  (ANY \\"/mockEndpoint\:text\\" [text] (mockEndpoint text))\\n  (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                         \:handle-ok \\"<html>Hello, Internet.</html>\\")))\\n\\n(def handler \\n  (-> app \\n      wrap-params))" "(defroutes app\\n  (ANY \\"/mockEndpoint&\:text\\" [text] (mockEndpoint text))\\n  (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                         \:handle-ok \\"<html>Hello, Internet.</html>\\")))" "(defresource mockEndpoint [text]\\n  \:available-media-types [\\"text/plain\\"]\\n  \:handle-ok (fn [_] (format \\"The text from agent is %s\\" text)))\\n\\n\\n\\n(defroutes app\\n  (ANY \\"/mockEndpoint&\:text\\" [text] (mockEndpoint text))\\n  (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                         \:handle-ok \\"<html>Hello, Internet.</html>\\")))\\n\\n(def handler \\n  (-> app \\n      wrap-params))" "\\n(defresource mockEndpoint [text]\\n  \:available-media-types [\\"text/plain\\"]\\n  \:handle-ok (fn [_] (format \\"The text from agent is %s\\" text)))\\n\\n\\n\\n(defroutes app\\n  (ANY \\"/mockEndpoint?\:text\\" [text] (mockEndpoint text))\\n  (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                         \:handle-ok \\"<html>Hello, Internet.</html>\\")))\\n\\n(def handler \\n  (-> app \\n      wrap-params))" "\\n(defresource mockEndpoint [text]\\n  \:available-media-types [\\"text/plain\\"]\\n  \:handle-ok (fn [_] (format \\"The text from agent is %s\\" text)))\\n\\n\\n\\n(defroutes app\\n  (ANY \\"/mockEndpoint-\:text\\" [text] (mockEndpoint text))\\n  (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                         \:handle-ok \\"<html>Hello, Internet.</html>\\")))\\n\\n(def handler \\n  (-> app \\n      wrap-params))" "\\n(defresource mockEndpoint [text]\\n  \:available-media-types [\\"text/plain\\"]\\n  \:handle-ok (fn [_] (format \\"The text from agent is %s\\" text)))\\n\\n\\n\\n(defroutes app\\n  (ANY \\"/mockEndpoint/\:text\\" [text] (mockEndpoint text))\\n  (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                         \:handle-ok \\"<html>Hello, Internet.</html>\\")))\\n\\n(def handler \\n  (-> app \\n      wrap-params))" "(defresource mockEndpoint [text]\\n  \:available-media-types [\\"text/plain\\"]\\n  \:handle-ok (fn [_] (format \\"The text from agent is %s\\" text)))\\n\\n\\n\\n(defroutes app\\n  (ANY \\"/mockEndpoint/\:\:text\\" [text] (mockEndpoint text))\\n  (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                         \:handle-ok \\"<html>Hello, Internet.</html>\\")))\\n\\n(def handler \\n  (-> app \\n      wrap-params))" "(defresource mockEndpoint [text]\\n  \:available-media-types [\\"text/plain\\"]\\n  \:handle-ok (fn [_] (format \\"The text from agent is %s\\" text)))\\n\\n\\n\\n(defroutes app\\n  (ANY \\"/mockEndpoint?\:text\\" [text] (mockEndpoint text))\\n  (ANY \\"/foo\\" [] (resource \:available-media-types [\\"text/html\\"]\\n                         \:handle-ok \\"<html>Hello, Internet.</html>\\")))\\n\\n(def handler \\n  (-> app \\n      wrap-params))" "(ns rest-api-attack-mitigation.core\\n  (\:require [liberator.core \:refer [resource defresource]]\\n              [ring.middleware.params \:refer [wrap-params]]\\n              [compojure.core \:refer [defroutes ANY]\\n              [ring.logger \:as logger]]))" "(jetty/run-jetty (logger/wrap-with-logger app) {\:port 4444})" "(isec/intelligent-security (print \\"test\\"))" "(isec/intelligent-security '(print \\"test\\"))" "(jetty/run-jetty (logger/wrap-with-logger app) {\:port 4444})" "\\n(def handler \\n  (-> app (fn [app] (do (print \\"here\\") app))\\n      wrap-params))" "(jetty/run-jetty (logger/wrap-with-logger app) {\:port 4444})" "handler" "(str handler)"]
eclipse.preferences.version=1
